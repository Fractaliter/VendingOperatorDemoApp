@inject VendingOperator.Client.Shared.PageHistoryState PageHistoryState
@inject IUserService UserService
@inject IVendingMachineService VendingMachineService
@inject IProductService ProductService

<EditForm Model="@Transaction" OnValidSubmit="@OnValidSubmit">
    <FluentValidator TValidator="TransactionValidator" />
    <div class="form-group">
        <label>AmountPaid :</label>
        <div>
            <InputNumber @bind-Value="@Transaction.AmountPaid" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => Transaction.AmountPaid)" />
        </div>
    </div>
    
    <div class="form-group">
        <label>Machine :</label>
        <div>
            <InputSelect @bind-Value="@Transaction.VendingMachineId" class="form-control col-sm-3">
                @foreach (var machine in vmachines)
                {
                    <option value="@machine.VendingMachineId">@machine.VendingMachineName</option>
                }

            </InputSelect>
            <ValidationMessage For="@(() => Transaction.VendingMachineId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Operator :</label>
        <div>
            <InputSelect @bind-Value="@Transaction.UserId" class="form-control col-sm-3">
                @foreach (var person in operators)
                {
                    <option value="@person.Id">@person.FirstName @person.LastName</option>
                }

            </InputSelect>
            <ValidationMessage For="@(() => Transaction.UserId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Product :</label>
        <div>
            <InputSelect @bind-Value="@Transaction.ProductId" class="form-control col-sm-3">
                @foreach (var product in products)
                {
                    <option value="@product.ProductId">@product.ProductName</option>
                }

            </InputSelect>
            <ValidationMessage For="@(() => Transaction.ProductId)" />
        </div>
    </div>


    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/transaction/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public Transaction Transaction { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private List<VendingMachine> vmachines = new List<VendingMachine>(); // Assuming you have a list of machines
    private List<User> operators = new List<User>(); // Assuming you have a list of operators
    private List<Product> products = new List<Product>(); // Assuming you have a list of products
    protected override async Task OnInitializedAsync()
    {
        var pagedResult = await UserService.GetUsers(null, Page);
        var pagedResult2 = await VendingMachineService.GetVendingMachines(null, Page);
        var pagedResult3 = await ProductService.GetProducts(null, Page);
        operators = pagedResult.Results.ToList();
        vmachines = pagedResult2.Results.ToList();
        products = pagedResult3.Results.ToList();
    }

}
