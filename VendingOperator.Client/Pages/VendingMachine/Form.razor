@inject VendingOperator.Client.Shared.PageHistoryState PageHistoryState
@inject IUserService UserService

<EditForm Model="@vendingmachine" OnValidSubmit="@OnValidSubmit">
    <FluentValidator TValidator="VendingMachineValidator" />
    <div class="form-group">
        <label>Vending Machine Name :</label>
        <div>
            <InputText @bind-Value="@vendingmachine.VendingMachineName" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => vendingmachine.VendingMachineName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Vending Machine Status :</label>
        <div>
            <InputText @bind-Value="@vendingmachine.VendingMachineStatus" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => vendingmachine.VendingMachineName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Location :</label>
        <div>
            <InputText @bind-Value="@vendingmachine.Location" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => vendingmachine.VendingMachineName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Capacity :</label>
        <div>
            <InputNumber @bind-Value="@vendingmachine.Capacity" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => vendingmachine.Capacity)" />
        </div>
    </div>

    <div class="form-group">
        <label>Users :</label>
        <div>
            <InputSelect @bind-Value="@vendingmachine.UserID" class="form-control col-sm-3">
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Username</option>
                }

            </InputSelect>
            <ValidationMessage For="@(() => vendingmachine.UserID)" />
        </div>
    </div>


    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/vendingmachine/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public VendingMachine vendingmachine { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private List<User> users = new List<User>(); // Assuming you have a list of users
    protected override async Task OnInitializedAsync()
    {
        var pagedResult = await UserService.GetUsers(null,Page);
        users = pagedResult.Results.ToList();
    }

}
