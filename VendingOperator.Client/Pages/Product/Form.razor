@inject VendingOperator.Client.Shared.PageHistoryState PageHistoryState
@inject IUserService UserService

<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
    <FluentValidator TValidator="ProductValidator" />
    <div class="form-group">
        <label>Product Name :</label>
        <div>
            <InputText @bind-Value="@product.ProductName" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description :</label>
        <div>
            <InputText @bind-Value="@product.Description" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => product.Description)" />
        </div>
    </div>
    <div class="form-group">
        <label>Price :</label>
        <div>
            <InputNumber @bind-Value="@product.Price" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>
    </div>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/product/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public Product product { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private List<User> users = new List<User>(); // Assuming you have a list of users
    protected override async Task OnInitializedAsync()
    {
        var pagedResult = await UserService.GetUsers(null,Page);
        users = pagedResult.Results.ToList();
    }

}
